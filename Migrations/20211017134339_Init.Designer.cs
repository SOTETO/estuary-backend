// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using estuary_backend;

namespace estuary_backend.Migrations
{
    [DbContext(typeof(EstuaryDbContext))]
    [Migration("20211017134339_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("TagWorkshop", b =>
                {
                    b.Property<int>("TagsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkshopsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagsId", "WorkshopsId");

                    b.HasIndex("WorkshopsId");

                    b.ToTable("TagWorkshop");
                });

            modelBuilder.Entity("estuary_backend.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DropsID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WorkshopId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("estuary_backend.Models.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WorkshopId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Content");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Content");
                });

            modelBuilder.Entity("estuary_backend.Models.ContentLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LinkTag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentLink");
                });

            modelBuilder.Entity("estuary_backend.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("estuary_backend.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("estuary_backend.Models.Workshop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationMap")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Teaser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Workshops");
                });

            modelBuilder.Entity("estuary_backend.Models.PropblemStatement", b =>
                {
                    b.HasBaseType("estuary_backend.Models.Content");

                    b.Property<string>("Because")
                        .HasColumnType("TEXT");

                    b.Property<string>("But")
                        .HasColumnType("TEXT");

                    b.Property<string>("Feel")
                        .HasColumnType("TEXT");

                    b.Property<string>("Iam")
                        .HasColumnType("TEXT");

                    b.Property<string>("Iwant")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("PropblemStatement");
                });

            modelBuilder.Entity("TagWorkshop", b =>
                {
                    b.HasOne("estuary_backend.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("estuary_backend.Models.Workshop", null)
                        .WithMany()
                        .HasForeignKey("WorkshopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("estuary_backend.Models.Author", b =>
                {
                    b.HasOne("estuary_backend.Models.Workshop", null)
                        .WithMany("Authors")
                        .HasForeignKey("WorkshopId");
                });

            modelBuilder.Entity("estuary_backend.Models.Content", b =>
                {
                    b.HasOne("estuary_backend.Models.Workshop", "Workshop")
                        .WithMany("Content")
                        .HasForeignKey("WorkshopId");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("estuary_backend.Models.ContentLink", b =>
                {
                    b.HasOne("estuary_backend.Models.Content", "Content")
                        .WithMany("RelatedContent")
                        .HasForeignKey("ContentId");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("estuary_backend.Models.Like", b =>
                {
                    b.HasOne("estuary_backend.Models.Content", null)
                        .WithMany("Likes")
                        .HasForeignKey("ContentId");
                });

            modelBuilder.Entity("estuary_backend.Models.Content", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("RelatedContent");
                });

            modelBuilder.Entity("estuary_backend.Models.Workshop", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Content");
                });
#pragma warning restore 612, 618
        }
    }
}
