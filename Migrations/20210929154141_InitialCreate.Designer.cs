// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using estuary_backend;

namespace estuary_backend.Migrations
{
    [DbContext(typeof(EstuaryDbContext))]
    [Migration("20210929154141_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("estuary_backend.Models.Author", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("WorkshopId")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("estuary_backend.Models.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Content");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Content");
                });

            modelBuilder.Entity("estuary_backend.Models.ContentLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkTag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentLink");
                });

            modelBuilder.Entity("estuary_backend.Models.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("estuary_backend.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WorkshopId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95a53535-2633-41a5-802b-7ad57efcc0ef"),
                            Name = "Improvements"
                        });
                });

            modelBuilder.Entity("estuary_backend.Models.Workshop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationMap")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Teaser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Workshops");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17bb47aa-c617-40c7-b88d-a3fed6bdc03e"),
                            Date = new DateTime(2021, 9, 29, 17, 41, 41, 97, DateTimeKind.Local).AddTicks(483),
                            LocationMap = "https://goo.gl/maps/mbnen1jr8C81J6vU9",
                            LocationName = "Hamburg",
                            Teaser = "Lorem ipsum dolor sit amet."
                        });
                });

            modelBuilder.Entity("estuary_backend.Models.WorkshopTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TagId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("WorkshopTag");

                    b.HasData(
                        new
                        {
                            Id = new Guid("facd3370-3cee-4af7-94a1-5f16a4769e64"),
                            TagId = new Guid("95a53535-2633-41a5-802b-7ad57efcc0ef"),
                            WorkshopId = new Guid("17bb47aa-c617-40c7-b88d-a3fed6bdc03e")
                        });
                });

            modelBuilder.Entity("estuary_backend.Models.PropblemStatement", b =>
                {
                    b.HasBaseType("estuary_backend.Models.Content");

                    b.Property<string>("Because")
                        .HasColumnType("TEXT");

                    b.Property<string>("But")
                        .HasColumnType("TEXT");

                    b.Property<string>("Feel")
                        .HasColumnType("TEXT");

                    b.Property<string>("Iam")
                        .HasColumnType("TEXT");

                    b.Property<string>("Iwant")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("PropblemStatement");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2cad981e-1de5-4d73-8b3c-b39de97bfe99"),
                            Title = "ProblemStatement 1",
                            WorkshopId = new Guid("17bb47aa-c617-40c7-b88d-a3fed6bdc03e"),
                            Because = "sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.",
                            But = "sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat",
                            Feel = "Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.Lorem ipsum dolor sit amet, consetetur sadipscing.",
                            Iam = "Lorem ipsum",
                            Iwant = "dolor sit amet, consetetur sadipscing elitr"
                        });
                });

            modelBuilder.Entity("estuary_backend.Models.Author", b =>
                {
                    b.HasOne("estuary_backend.Models.Workshop", null)
                        .WithMany("Authors")
                        .HasForeignKey("WorkshopId");
                });

            modelBuilder.Entity("estuary_backend.Models.Content", b =>
                {
                    b.HasOne("estuary_backend.Models.Workshop", "Workshop")
                        .WithMany("Content")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("estuary_backend.Models.ContentLink", b =>
                {
                    b.HasOne("estuary_backend.Models.Content", "Content")
                        .WithMany("RelatedContent")
                        .HasForeignKey("ContentId");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("estuary_backend.Models.Like", b =>
                {
                    b.HasOne("estuary_backend.Models.Content", null)
                        .WithMany("Likes")
                        .HasForeignKey("ContentId");
                });

            modelBuilder.Entity("estuary_backend.Models.Tag", b =>
                {
                    b.HasOne("estuary_backend.Models.Workshop", null)
                        .WithMany("Tags")
                        .HasForeignKey("WorkshopId");
                });

            modelBuilder.Entity("estuary_backend.Models.WorkshopTag", b =>
                {
                    b.HasOne("estuary_backend.Models.Tag", "Tag")
                        .WithMany("WorkshopTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("estuary_backend.Models.Workshop", "Workshop")
                        .WithMany()
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("estuary_backend.Models.Content", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("RelatedContent");
                });

            modelBuilder.Entity("estuary_backend.Models.Tag", b =>
                {
                    b.Navigation("WorkshopTags");
                });

            modelBuilder.Entity("estuary_backend.Models.Workshop", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Content");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
